{"ast":null,"code":"//import React from 'react';\n//import React from 'react';\n//import ReactDOM from 'react-dom';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB2yTPOk9y8C4hWu_x8crC8q3Sqbu6R44I\",\n  authDomain: \"winejs-db.firebaseapp.com\",\n  databaseURL: \"https://winejs-db.firebaseio.com\",\n  projectId: \"winejs-db\",\n  storageBucket: \"winejs-db.appspot.com\",\n  messagingSenderId: \"890771190455\",\n  appId: \"1:890771190455:web:7f52cb240e4e4b9ab29332\",\n  measurementId: \"G-6HWXZH3Y84\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  //auth.signInWithPopup(provider);\n  auth.signInWithRedirect(provider); //auth.signInWithCredential(provider);\n};\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n}; //const FirebaseContext = React.createContext(null);\n//export default FirebaseContext","map":{"version":3,"sources":["C:/GitRepos/WineJS/app/src/Firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","signInWithGoogle","signInWithRedirect","generateUserDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","email","displayName","photoURL","set","error","console","getUserDocument","userDocument","data"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,2BAFO;AAGnBC,EAAAA,WAAW,EAAE,kCAHM;AAInBC,EAAAA,SAAS,EAAE,WAJQ;AAKnBC,EAAAA,aAAa,EAAE,uBALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB;AACA,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AAEP,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACW,IAAT,CAAcG,kBAAlB,EAAjB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC;AACAJ,EAAAA,IAAI,CAACK,kBAAL,CAAwBH,QAAxB,EAFkC,CAGlC;AACH,CAJM;AAOP,OAAO,MAAMI,oBAAoB,GAAG,OAAOC,IAAP,EAAaC,cAAb,KAAgC;AAChE,MAAI,CAACD,IAAL,EAAW;AACX,QAAME,OAAO,GAAGR,SAAS,CAACS,GAAV,CAAe,SAAQH,IAAI,CAACI,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAmCV,IAAzC;;AACA,QAAI;AACF,YAAME,OAAO,CAACS,GAAR,CAAY;AAChBF,QAAAA,WADgB;AAEhBD,QAAAA,KAFgB;AAGhBE,QAAAA,QAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;;AACD,SAAOE,eAAe,CAACd,IAAI,CAACI,GAAN,CAAtB;AACD,CAlBI;;AAoBP,MAAMU,eAAe,GAAG,MAAMV,GAAN,IAAa;AACjC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACN,MAAI;AACA,UAAMW,YAAY,GAAG,MAAMrB,SAAS,CAACS,GAAV,CAAe,SAAQC,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACPF,MAAAA,GADO;AAEP,SAAGW,YAAY,CAACC,IAAb;AAFI,KAAP;AAIP,GANG,CAMF,OAAOJ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;AACJ,CAXD,C,CAcA;AACA","sourcesContent":["//import React from 'react';\r\n//import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB2yTPOk9y8C4hWu_x8crC8q3Sqbu6R44I\",\r\n    authDomain: \"winejs-db.firebaseapp.com\",\r\n    databaseURL: \"https://winejs-db.firebaseio.com\",\r\n    projectId: \"winejs-db\",\r\n    storageBucket: \"winejs-db.appspot.com\",\r\n    messagingSenderId: \"890771190455\",\r\n    appId: \"1:890771190455:web:7f52cb240e4e4b9ab29332\",\r\n    measurementId: \"G-6HWXZH3Y84\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n    //auth.signInWithPopup(provider);\r\n    auth.signInWithRedirect(provider);\r\n    //auth.signInWithCredential(provider);\r\n};\r\n\r\n\r\nexport const generateUserDocument = async (user, additionalData) => {\r\n    if (!user) return;\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n    const snapshot = await userRef.get();\r\n    if (!snapshot.exists) {\r\n      const { email, displayName, photoURL } = user;\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          photoURL,\r\n          ...additionalData\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error creating user document\", error);\r\n      }\r\n    }\r\n    return getUserDocument(user.uid);\r\n  };\r\n\r\nconst getUserDocument = async uid => {\r\n    if (!uid) return null;\r\n        try {\r\n            const userDocument = await firestore.doc(`users/${uid}`).get();\r\n            return {\r\n            uid,\r\n            ...userDocument.data()\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error fetching user\", error);\r\n    }\r\n};\r\n\r\n\r\n//const FirebaseContext = React.createContext(null);\r\n//export default FirebaseContext"]},"metadata":{},"sourceType":"module"}